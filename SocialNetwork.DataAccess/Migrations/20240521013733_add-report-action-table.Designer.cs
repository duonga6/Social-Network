// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialNetwork.DataAccess.Context;

#nullable disable

namespace SocialNetwork.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240521013733_add-report-action-table")]
    partial class addreportactiontable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0e07abea-2b70-43e5-845e-8c9e0630b566",
                            ConcurrencyStamp = "29c0a33b-f0bc-406d-a9e1-c1ba8882f6d9",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "1b78caa6-71f6-49d1-9d65-43da7f25dbe4",
                            ConcurrencyStamp = "843fd906-f280-48d3-9ece-3157a3523b4e",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "a95e4b36-c9d8-4848-9cd9-d60677692501",
                            ConcurrencyStamp = "ec1f94b3-c0ba-4329-9c67-65ee9ee8ce65",
                            Name = "SuperAdministrator",
                            NormalizedName = "SUPERADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.ActionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ActionReports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionName = "Khóa tài khoản người dùng",
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 949, DateTimeKind.Utc).AddTicks(131),
                            ReportType = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 949, DateTimeKind.Utc).AddTicks(133)
                        },
                        new
                        {
                            Id = 2,
                            ActionName = "Khóa tài khoản người dùng",
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 949, DateTimeKind.Utc).AddTicks(138),
                            ReportType = 0,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 949, DateTimeKind.Utc).AddTicks(138)
                        },
                        new
                        {
                            Id = 3,
                            ActionName = "Xóa bài viết",
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 949, DateTimeKind.Utc).AddTicks(138),
                            ReportType = 0,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 949, DateTimeKind.Utc).AddTicks(139)
                        },
                        new
                        {
                            Id = 4,
                            ActionName = "Khóa tài khoản người dùng",
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 949, DateTimeKind.Utc).AddTicks(139),
                            ReportType = 3,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 949, DateTimeKind.Utc).AddTicks(140)
                        },
                        new
                        {
                            Id = 5,
                            ActionName = "Xóa nhóm",
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 949, DateTimeKind.Utc).AddTicks(140),
                            ReportType = 3,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 949, DateTimeKind.Utc).AddTicks(140)
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.ActionReportDid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActionReportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActionReportId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReportId");

                    b.ToTable("ActionReportDids");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.CommentReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReactionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReactionId");

                    b.HasIndex("UserId", "CommentId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("CommentReactions");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedId");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.ConversationParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationParticipants");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Friendship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FriendshipTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RequestUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TargetUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FriendshipTypeId");

                    b.HasIndex("RequestUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.FriendshipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FriendshipTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 953, DateTimeKind.Utc).AddTicks(3010),
                            Name = "Pending",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 953, DateTimeKind.Utc).AddTicks(3011)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 953, DateTimeKind.Utc).AddTicks(3014),
                            Name = "Accepted",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 953, DateTimeKind.Utc).AddTicks(3015)
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 953, DateTimeKind.Utc).AddTicks(3390),
                            Name = "Female",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 953, DateTimeKind.Utc).AddTicks(3391)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 953, DateTimeKind.Utc).AddTicks(3393),
                            Name = "Male",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 953, DateTimeKind.Utc).AddTicks(3393)
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PreCensored")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalMember")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.GroupInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AdminAccepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UserAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId", "GroupId")
                        .IsUnique();

                    b.ToTable("GroupInvites");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "UserId")
                        .IsUnique();

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.MediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MediaTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 957, DateTimeKind.Utc).AddTicks(2916),
                            Name = "Text",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 957, DateTimeKind.Utc).AddTicks(2917)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 957, DateTimeKind.Utc).AddTicks(2921),
                            Name = "Image",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 957, DateTimeKind.Utc).AddTicks(2921)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 957, DateTimeKind.Utc).AddTicks(2922),
                            Name = "Video",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 957, DateTimeKind.Utc).AddTicks(2922)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 957, DateTimeKind.Utc).AddTicks(2923),
                            Name = "File",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 957, DateTimeKind.Utc).AddTicks(2923)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 957, DateTimeKind.Utc).AddTicks(2923),
                            Name = "Hyper link",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 957, DateTimeKind.Utc).AddTicks(2924)
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MediaTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReadedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("MediaTypeId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("ReplyId")
                        .IsUnique()
                        .HasFilter("[ReplyId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.MessageMemberReaded", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageMemberReadeds");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JsonDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifiableId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ToId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Access")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SharePostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("GroupId");

                    b.HasIndex("SharePostId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.PostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.PostMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MediaTypeId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostMedias");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.PostReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReactionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReactionId");

                    b.HasIndex("UserId");

                    b.HasIndex("PostId", "UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("PostReactions");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Reactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorCode = "#0561F2",
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 965, DateTimeKind.Utc).AddTicks(2024),
                            IconUrl = "https://i.ibb.co/BNNPTgp/like.png",
                            Name = "Thích",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 965, DateTimeKind.Utc).AddTicks(2026)
                        },
                        new
                        {
                            Id = 2,
                            ColorCode = "#f33e58",
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 965, DateTimeKind.Utc).AddTicks(2031),
                            IconUrl = "https://i.ibb.co/wJ8H9wy/love.png",
                            Name = "Yêu thích",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 965, DateTimeKind.Utc).AddTicks(2031)
                        },
                        new
                        {
                            Id = 3,
                            ColorCode = "#F7B125",
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 965, DateTimeKind.Utc).AddTicks(2032),
                            IconUrl = "https://i.ibb.co/BKBGxqr/haha.png",
                            Name = "Haha",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 965, DateTimeKind.Utc).AddTicks(2032)
                        },
                        new
                        {
                            Id = 4,
                            ColorCode = "#F7B125",
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 965, DateTimeKind.Utc).AddTicks(2033),
                            IconUrl = "https://i.ibb.co/hX0ktCf/wow.png",
                            Name = "Wow",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 965, DateTimeKind.Utc).AddTicks(2033)
                        },
                        new
                        {
                            Id = 5,
                            ColorCode = "#F7B125",
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 965, DateTimeKind.Utc).AddTicks(2035),
                            IconUrl = "https://i.ibb.co/9vgHgc4/sad.png",
                            Name = "Buồn",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 965, DateTimeKind.Utc).AddTicks(2035)
                        },
                        new
                        {
                            Id = 6,
                            ColorCode = "#E9710F",
                            CreatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 965, DateTimeKind.Utc).AddTicks(2038),
                            IconUrl = "https://i.ibb.co/dp2vn3Z/angry.png",
                            Name = "Phẫn nộ",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 5, 21, 1, 37, 32, 965, DateTimeKind.Utc).AddTicks(2038)
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.ReportViolation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSolved")
                        .HasColumnType("bit");

                    b.Property<string>("JsonDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportType")
                        .HasColumnType("int");

                    b.Property<string>("SolvedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SolvedById");

                    b.HasIndex("UserId");

                    b.ToTable("ReportViolations");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.StrangeMessageBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ToId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("StrangeMessageBlocks");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Gender");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.ActionReportDid", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.ActionReport", "ActionReport")
                        .WithMany("ActionReportDids")
                        .HasForeignKey("ActionReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("ActionReportsDid")
                        .HasForeignKey("CreatedById");

                    b.HasOne("SocialNetwork.DataAccess.Entities.ReportViolation", "Report")
                        .WithMany("ActionReportDids")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionReport");

                    b.Navigation("CreatedBy");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.CommentReaction", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.PostComment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.Reaction", "Reaction")
                        .WithMany("CommentReactions")
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "User")
                        .WithMany("CommentReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Comment");

                    b.Navigation("Reaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Conversation", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("ConversationCreated")
                        .HasForeignKey("CreatedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.ConversationParticipant", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.Conversation", "Conversation")
                        .WithMany("ConversationParticipants")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "User")
                        .WithMany("ConversationParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Friendship", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.FriendshipType", "FriendshipType")
                        .WithMany()
                        .HasForeignKey("FriendshipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "RequestUser")
                        .WithMany("Friendships1")
                        .HasForeignKey("RequestUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "TargetUser")
                        .WithMany("Friendships2")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FriendshipType");

                    b.Navigation("RequestUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Group", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("GroupOwner")
                        .HasForeignKey("CreatedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.GroupInvite", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("GroupInvitesCreate")
                        .HasForeignKey("CreatedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.Group", "Group")
                        .WithMany("GroupInvites")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "User")
                        .WithMany("GroupInvites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.GroupMember", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.MediaType", null)
                        .WithMany("Messages")
                        .HasForeignKey("MediaTypeId");

                    b.HasOne("SocialNetwork.DataAccess.Entities.ConversationParticipant", "Participant")
                        .WithOne()
                        .HasForeignKey("SocialNetwork.DataAccess.Entities.Message", "ParticipantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.Message", "ReplyMessage")
                        .WithOne()
                        .HasForeignKey("SocialNetwork.DataAccess.Entities.Message", "ReplyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Conversation");

                    b.Navigation("Participant");

                    b.Navigation("ReplyMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.MessageMemberReaded", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.Conversation", "Conversation")
                        .WithMany("MessageReadeds")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.Message", "Message")
                        .WithMany("MessageReadeds")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "User")
                        .WithMany("MessageReadeds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Conversation");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "FromUser")
                        .WithMany("NotificationSend")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "ToUser")
                        .WithMany("NotificationsReceive")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Post", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.Group", "Group")
                        .WithMany("Posts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SocialNetwork.DataAccess.Entities.Post", "SharePost")
                        .WithOne()
                        .HasForeignKey("SocialNetwork.DataAccess.Entities.Post", "SharePostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");

                    b.Navigation("Group");

                    b.Navigation("SharePost");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.PostComment", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.PostComment", "ParentComment")
                        .WithMany("ChildrenComment")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SocialNetwork.DataAccess.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "User")
                        .WithMany("PostComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.PostMedia", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.MediaType", "MediaType")
                        .WithMany("PostMedias")
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.Post", "Post")
                        .WithMany("PostMedias")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "User")
                        .WithMany("PostMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MediaType");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.PostReaction", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.Reaction", "Reaction")
                        .WithMany("PostReactions")
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "User")
                        .WithMany("PostReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Post");

                    b.Navigation("Reaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.RefreshToken", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.ReportViolation", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "SolvedUser")
                        .WithMany("ReportsSolved")
                        .HasForeignKey("SolvedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "User")
                        .WithMany("ReportsSend")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SolvedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.StrangeMessageBlock", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "FromUser")
                        .WithMany("StrangeMessageBlocked")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SocialNetwork.DataAccess.Entities.User", "ToUser")
                        .WithMany("StrangeMessageIsBlocked")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.User", b =>
                {
                    b.HasOne("SocialNetwork.DataAccess.Entities.Gender", "Gender_FK")
                        .WithMany("Users")
                        .HasForeignKey("Gender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender_FK");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.ActionReport", b =>
                {
                    b.Navigation("ActionReportDids");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Conversation", b =>
                {
                    b.Navigation("ConversationParticipants");

                    b.Navigation("MessageReadeds");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Group", b =>
                {
                    b.Navigation("GroupInvites");

                    b.Navigation("GroupMembers");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.MediaType", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("PostMedias");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Message", b =>
                {
                    b.Navigation("MessageReadeds");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostMedias");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.PostComment", b =>
                {
                    b.Navigation("ChildrenComment");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.Reaction", b =>
                {
                    b.Navigation("CommentReactions");

                    b.Navigation("PostReactions");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.ReportViolation", b =>
                {
                    b.Navigation("ActionReportDids");
                });

            modelBuilder.Entity("SocialNetwork.DataAccess.Entities.User", b =>
                {
                    b.Navigation("ActionReportsDid");

                    b.Navigation("CommentReactions");

                    b.Navigation("ConversationCreated");

                    b.Navigation("ConversationParticipants");

                    b.Navigation("Friendships1");

                    b.Navigation("Friendships2");

                    b.Navigation("GroupInvites");

                    b.Navigation("GroupInvitesCreate");

                    b.Navigation("GroupMembers");

                    b.Navigation("GroupOwner");

                    b.Navigation("MessageReadeds");

                    b.Navigation("Messages");

                    b.Navigation("NotificationSend");

                    b.Navigation("NotificationsReceive");

                    b.Navigation("PostComments");

                    b.Navigation("PostMedias");

                    b.Navigation("PostReactions");

                    b.Navigation("Posts");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ReportsSend");

                    b.Navigation("ReportsSolved");

                    b.Navigation("StrangeMessageBlocked");

                    b.Navigation("StrangeMessageIsBlocked");
                });
#pragma warning restore 612, 618
        }
    }
}
